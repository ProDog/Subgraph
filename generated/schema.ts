// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositEntity", id.toString(), this);
  }

  static load(id: string): DepositEntity | null {
    return store.get("DepositEntity", id) as DepositEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get assetFrom(): Bytes {
    let value = this.get("assetFrom");
    return value.toBytes();
  }

  set assetFrom(value: Bytes) {
    this.set("assetFrom", Value.fromBytes(value));
  }

  get assetTo(): Bytes {
    let value = this.get("assetTo");
    return value.toBytes();
  }

  set assetTo(value: Bytes) {
    this.set("assetTo", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get chainIDFrom(): BigInt {
    let value = this.get("chainIDFrom");
    return value.toBigInt();
  }

  set chainIDFrom(value: BigInt) {
    this.set("chainIDFrom", Value.fromBigInt(value));
  }

  get chainIDTo(): BigInt {
    let value = this.get("chainIDTo");
    return value.toBigInt();
  }

  set chainIDTo(value: BigInt) {
    this.set("chainIDTo", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }
}

export class WithdrawEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WithdrawEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithdrawEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithdrawEntity", id.toString(), this);
  }

  static load(id: string): WithdrawEntity | null {
    return store.get("WithdrawEntity", id) as WithdrawEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get assetFrom(): Bytes {
    let value = this.get("assetFrom");
    return value.toBytes();
  }

  set assetFrom(value: Bytes) {
    this.set("assetFrom", Value.fromBytes(value));
  }

  get assetTo(): Bytes {
    let value = this.get("assetTo");
    return value.toBytes();
  }

  set assetTo(value: Bytes) {
    this.set("assetTo", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get chainIDFrom(): BigInt {
    let value = this.get("chainIDFrom");
    return value.toBigInt();
  }

  set chainIDFrom(value: BigInt) {
    this.set("chainIDFrom", Value.fromBigInt(value));
  }

  get chainIDTo(): BigInt {
    let value = this.get("chainIDTo");
    return value.toBigInt();
  }

  set chainIDTo(value: BigInt) {
    this.set("chainIDTo", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }
}

export class LockEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LockEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LockEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LockEntity", id.toString(), this);
  }

  static load(id: string): LockEntity | null {
    return store.get("LockEntity", id) as LockEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get assetFrom(): Bytes {
    let value = this.get("assetFrom");
    return value.toBytes();
  }

  set assetFrom(value: Bytes) {
    this.set("assetFrom", Value.fromBytes(value));
  }

  get assetTo(): Bytes {
    let value = this.get("assetTo");
    return value.toBytes();
  }

  set assetTo(value: Bytes) {
    this.set("assetTo", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get relayer(): Bytes {
    let value = this.get("relayer");
    return value.toBytes();
  }

  set relayer(value: Bytes) {
    this.set("relayer", Value.fromBytes(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get chainIDFrom(): BigInt {
    let value = this.get("chainIDFrom");
    return value.toBigInt();
  }

  set chainIDFrom(value: BigInt) {
    this.set("chainIDFrom", Value.fromBigInt(value));
  }

  get chainIDTo(): BigInt {
    let value = this.get("chainIDTo");
    return value.toBigInt();
  }

  set chainIDTo(value: BigInt) {
    this.set("chainIDTo", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }
}

export class DepositForRelayerEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DepositForRelayerEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositForRelayerEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositForRelayerEntity", id.toString(), this);
  }

  static load(id: string): DepositForRelayerEntity | null {
    return store.get(
      "DepositForRelayerEntity",
      id
    ) as DepositForRelayerEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get assetFrom(): Bytes {
    let value = this.get("assetFrom");
    return value.toBytes();
  }

  set assetFrom(value: Bytes) {
    this.set("assetFrom", Value.fromBytes(value));
  }

  get assetTo(): Bytes {
    let value = this.get("assetTo");
    return value.toBytes();
  }

  set assetTo(value: Bytes) {
    this.set("assetTo", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get chainIDFrom(): BigInt {
    let value = this.get("chainIDFrom");
    return value.toBigInt();
  }

  set chainIDFrom(value: BigInt) {
    this.set("chainIDFrom", Value.fromBigInt(value));
  }

  get chainIDTo(): BigInt {
    let value = this.get("chainIDTo");
    return value.toBigInt();
  }

  set chainIDTo(value: BigInt) {
    this.set("chainIDTo", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }
}

export class HarvestEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HarvestEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HarvestEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HarvestEntity", id.toString(), this);
  }

  static load(id: string): HarvestEntity | null {
    return store.get("HarvestEntity", id) as HarvestEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get assetFrom(): Bytes {
    let value = this.get("assetFrom");
    return value.toBytes();
  }

  set assetFrom(value: Bytes) {
    this.set("assetFrom", Value.fromBytes(value));
  }

  get assetTo(): Bytes {
    let value = this.get("assetTo");
    return value.toBytes();
  }

  set assetTo(value: Bytes) {
    this.set("assetTo", Value.fromBytes(value));
  }

  get chainIDFrom(): BigInt {
    let value = this.get("chainIDFrom");
    return value.toBigInt();
  }

  set chainIDFrom(value: BigInt) {
    this.set("chainIDFrom", Value.fromBigInt(value));
  }

  get chainIDTo(): BigInt {
    let value = this.get("chainIDTo");
    return value.toBigInt();
  }

  set chainIDTo(value: BigInt) {
    this.set("chainIDTo", Value.fromBigInt(value));
  }

  get v(): i32 {
    let value = this.get("v");
    return value.toI32();
  }

  set v(value: i32) {
    this.set("v", Value.fromI32(value));
  }

  get r(): Bytes {
    let value = this.get("r");
    return value.toBytes();
  }

  set r(value: Bytes) {
    this.set("r", Value.fromBytes(value));
  }

  get s(): Bytes {
    let value = this.get("s");
    return value.toBytes();
  }

  set s(value: Bytes) {
    this.set("s", Value.fromBytes(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }
}

export class HarvestForRealyerEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save HarvestForRealyerEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HarvestForRealyerEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HarvestForRealyerEntity", id.toString(), this);
  }

  static load(id: string): HarvestForRealyerEntity | null {
    return store.get(
      "HarvestForRealyerEntity",
      id
    ) as HarvestForRealyerEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get assetFrom(): Bytes {
    let value = this.get("assetFrom");
    return value.toBytes();
  }

  set assetFrom(value: Bytes) {
    this.set("assetFrom", Value.fromBytes(value));
  }

  get assetTo(): Bytes {
    let value = this.get("assetTo");
    return value.toBytes();
  }

  set assetTo(value: Bytes) {
    this.set("assetTo", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get chainIDFrom(): BigInt {
    let value = this.get("chainIDFrom");
    return value.toBigInt();
  }

  set chainIDFrom(value: BigInt) {
    this.set("chainIDFrom", Value.fromBigInt(value));
  }

  get chainIDTo(): BigInt {
    let value = this.get("chainIDTo");
    return value.toBigInt();
  }

  set chainIDTo(value: BigInt) {
    this.set("chainIDTo", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }
}
